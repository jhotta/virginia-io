this.exec = require("child_process").exec;
this.sinon = require("sinon");

this.sinon.spy(this, "exec");

var exec = this.exec;

// 1000000 nanoseconds (1 millisecond);
var PERIOD = 1000000;

var aliases = {
  pwm: {
    3: 3,
    5: 5,
    6: 6,
    9: 1,
    10: 7,
    11: 4
  },
  gpio: {
    0: 50,
    1: 51,
    2: 32,
    3: 18,
    4: 28,
    5: 17,
    6: 24,
    7: 27,
    8: 26,
    9: 19,
    10: 16,
    11: 25,
    12: 38,
    13: 39
  }
};

// O0: 11,
// O1: 10,
// O2: 9,
// O3: 6,
// O4: 5,
// O5: 3,

var exported = {};

var priv = new Map();

function scale(x, fromLow, fromHigh, toLow, toHigh) {
  return (x - fromLow) * (toHigh - toLow) /
    (fromHigh - fromLow) + toLow;
}

function degrees(val) {
  return scale(val, 0, 180, 0, 255);
}


function PWM(pin) {
  this.pwm = aliases.pwm[pin];
  this.gpio = aliases.gpio[pin];
  this.isEnabled = false;
  // enable
  //
  var state = {
    isEnabled: false
  };
}

PWM.prototype.enable = function(continuation) {

};

PWM.prototype.write = function(value) {

};

function enablePwm(pin, continuation) {
  var pwm = aliases.pwm[pin];

  exported[pwm] = true;

  var commands = [
    "echo -n '" + pwm + "' > /sys/class/pwm/pwmchip0/export",
    "echo -n '1' > /sys/class/pwm/pwmchip0/pwm" + pwm + "/enable",
    "echo -n '0' > /sys/class/pwm/pwmchip0/pwm" + pwm + "/period",
    "echo -n '0' > /sys/class/pwm/pwmchip0/pwm" + pwm + "/duty_cycle"
  ].join(";");

  exec(commands);

  continuation();
}

function writePwm(pin, value) {
  var pwm = aliases.pwm[pin];
  var gpio = aliases.gpio[pin];
  var duty, commands;

  console.log("Pin: %d is pwm %d and gpio %d", pin, pwm, gpio);

  if (!exported[pwm]) {
    enablePwm(pin, function() {
      writePwm(pin, value);
    });
    return;
  }

  // TODO: constrain value to 0-255 range.
  duty = Math.round((PERIOD * value) / 255) | 0;

  commands = [
    "echo -n '0' > /sys/class/gpio/gpio" + gpio + "/value",
    "echo -n '" + PERIOD + "' > /sys/class/pwm/pwmchip0/pwm" + pwm + "/period",
    "echo -n '" + duty + "' > /sys/class/pwm/pwmchip0/pwm" + pwm + "/duty_cycle"
  ].join(";");

  exec(commands);
}


writePwm(6, degrees(90));


// var direction = 1;
// var to = 1000 / (255 * 2);
// var value = 0;

// console.log( value );

writePwm(10, 0);

// setInterval(function() {
//   if (value === 0) {
//     direction = 1;
//   }

//   if (value === 255) {
//     direction = -1;
//   }

//   writePwm(10, value += direction);
//   console.log( "setting: ", value );
// }, to);


// [
//   "echo -n '4' > /sys/class/pwm/pwmchip0/export",
//   "echo -n '1' > /sys/class/pwm/pwmchip0/pwm4/enable",
//   "echo -n '1000000' > /sys/class/pwm/pwmchip0/pwm4/period",
//   "echo -n '500000' > /sys/class/pwm/pwmchip0/pwm4/duty_cycle"
// ].forEach(exec);

// // console.log( exec );
